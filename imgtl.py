from PIL import Image
import pytesseract
from translate import Translator
from PIL import ImageFont, ImageDraw, Image
import os  # for methods that check if a filepath and a file exist

"""
Python 3 script file for obtaining an image file with text from a user
and using the tesseract OCR engine to generate a .txt file from the image.
The .txt file is then passed to a translator that translates the text to
English and outputs the translation as both a .txt file and a JPG image file.
"""

# The next line may not be needed. Uncomment if needed.
# It is needed if tesseract is not in your PATH
# (Check path for tesseract and modify the line below if needed)
# pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'


def ocr_core(filename, language):
    """Handles the core OCR processing of the input image.

    :param filename: the name of the input image file
    :type filename: string
    :param language: the choice of input file language
    :type language: string
    """
    choice = 0
    if language == '1':
        choice = 'chi_sim'
    elif language == '2':
        choice = 'deu'
    elif language == '3':
        choice = 'hun'
    elif language == '4':
        choice = 'spa'
    elif language == '5':
        choice = 'fra'

    text = pytesseract.image_to_string(Image.open(filename), lang=choice)
    return text

def writefile(image_path, strstr):
    """Writes text extracted from image into a txt file named "script.txt" 
    which is saved in the same path as the input image file.

    :param image_path: the path of the input file obtained from the user
    :type image_path: string
    :param strstr: string of words that have been generated by OCR
    :type strstr: string
    """
    wordlist = strstr.split()
    with open(image_path + '/script.txt', 'a') as f:
	    f.writelines("\r".join(wordlist))

def translate_text(image_path, imagename, language, fontChoice, fontColorChoice):
    """Takes lines of text extracted from txt file and translates them,
    outputs translated version into a txt file called "translated.txt"
    and an image file with the translated text called Capture.JPG.

    :param image_path: the path of the input file obtained from the user
    :type image_path: string
    :param imagename: name of the input image file
    :type imagename: string
    :param language: the choice of input file language
    :type language: string
    :param fontChoice: choice of the output file font
    :type fontChoice: string
    :param fontColorChoice: choice of the output file font color
    :type fontColorChoice: string
    """
    # sets target language and input language for translator
    choice = 0
    if language == '1':
        choice = "zh"
    elif language == '2':
        choice = 'de'
    elif language == '3':
        choice = 'hu'
    elif language == '4':
        choice = 'es'
    elif language == '5':
        choice = 'fr'
    translator = Translator(to_lang="en", from_lang=choice)

    # opens the OCR output file and reads each line into contents
    with open(image_path + '/script.txt', encoding='utf-8') as f:
        contents = f.readlines()

    # sets the dimensions and background color for the new image object
    oldimg = Image.open(image_path + "/" + imagename)
    # Grab the size of the input image
    # Later we can choose a font size depending on input image size
    width, height = oldimg.size
    # enlarge the output image so text does not need to be tiny (for small input files)
    # width *= 2
    # height *= 2

    # Grab a color sample, to reproduce the background in the output image
    # The code obtains an rgb tuple at position (x,y)
    # grabs pixel from upper left corner
    background = oldimg.getpixel((5, 5))

    newimg = Image.new(mode="RGB", size=(width, height), color=background)

    # Generates a txt file and JPG image file from the translated txt file
    with open(image_path + '/translated.txt', 'a') as n:  # the 'a' argument means append
        movedown = 20   # variable to help draw multiple text lines to image. This is initial verticle position

        #sets font choice for output file
        if fontChoice == '1':
            customfont = "arial.ttf"
        elif fontChoice == '2':
            customfont = "times new roman.ttf"
        elif fontChoice == '3':
            customfont = "comic sans.ttf"

        # sets font color for output file
        if fontColorChoice == '1':  # sets color to black
            customfill = (0, 0, 0)
        elif fontColorChoice == '2':  # sets color to red
            customfill = (255, 0, 0)
        elif fontColorChoice == '3':  # sets color to blue
            customfill = (0, 0, 255)
        elif fontColorChoice == '4':  # sets color to pink
            customfill = (255, 192, 203)

        # iterates thru each line of text in "contents"
        for line in contents:  
            # translate each line and write to file
            n.writelines(translator.translate(line) + "\n")
            draw = ImageDraw.Draw(newimg)
            # font size 20 should be scaled for image size
            font = ImageFont.truetype(customfont, 20)
            # In the next line, first 2 numbers are pixels to right and down of upper corner
            draw.text((5, movedown), translator.translate(
                line), fill=customfill, font=font)
            movedown += 25
        newimg.save("Capture.JPG")
        newimg.show()  # I don't think this works

# FUNCTIONS FOR TEST SUITE

# Analyses and outputs test results
def test_suite(path, filename, language):
    Test1 = text_exist(path, filename, language)
    Test2 = ocr_work()
    Test3 = directory_valid(path)
    Test4 = file_exist(filename)
    Test5 = path_exist(path)
    Test6 = textg1(path, filename, language)
    if Test1 == True:
       print("Test 1:Passed!")
    else:
       print("Test 1:Failed!")
    if Test2 == True:
       print("Test 2:Passed!")
    else:
       print("Test 2:Failed!")
    if Test3 == True:
       print("Test 3:Passed!")
    else:
       print("Test 3:Failed!")
    if Test4 == True:
       print("Test 4:Passed!")
    else:
       print("Test 4:Failed!")
    if Test5 == True:
       print("Test 5:Passed!")
    else:
       print("Test 5:Failed!")
    if Test6 == True:
       print("Test 6:Passed!")
    else:
      print("Test 6:Failed!")

# This test uses ocr_path to check if text exists in this image
def text_exist(path, filename, language):
    test = True
    text = ocr_core(path + "/" + filename, language)
    if text.isspace():
        test = False
    return test

# This test checks the very basics of whether ocr can read a singular word for yes
# in French
def ocr_work():
    frantext = ocr_core("/content/fyes.png", '5')
    if len(frantext) == 6:
        return True
    else:
        return False

#This test checks if directory is still valid
def directory_valid(path):
    valid = os.path.isdir(path)
    return valid

#This checks if file is still valid
def file_exist(userfile):
    valid = os.path.exists(userfile)
    return valid

#This checks if path is still valid
def path_exist(path):
    valid = os.path.exists(path)
    return valid

#This checks if the text read from ocr has more than one character
def textg1(path, filename, language):
    text = ocr_core(path + "/" + filename, language)
    if len(text) > 1:
        return True
    else:
        return False

# Function for running the standard OCR-Translation program
def run():
    # Obtain input path and file name from the user and check if valid
    error = 0
    while error == 0:
        path = input('file path: ')
        userfile = input('file name: ')

        #OS library methods that check if the user-entered file path and a file exist
        isPathExist = os.path.exists(path)
        isUserFileExist = os.path.exists(userfile)
        # if we check path, why also check directory?
        directoryValid = os.path.isdir(path)

        # Output error messages for bad user input for file path and file name
        #checks if directory is valid. Commented out because too many error messages
        # if(directoryValid == False):
        # print("Error: invalid directory")
        #checks for filepath validity
        if(isPathExist == False):
            print("Error: invalid file path")
        #checks for file existance
        elif(isUserFileExist == False):
            print("Error: invalid File")
        else:
            error = 1

    # Obtain language choice and check if valid
    print("\nYou have 5 choices for input language. \nEnter 1 for Chinese, 2 for German, 3 for Hungarian, 4 for Spanish, or 5 for French.")
    error = 0
    while error == 0:
        inlanguage = input('Your language choice: ')
        if(inlanguage.isnumeric() == True and (int(inlanguage) == 1 or int(inlanguage) == 2 or int(inlanguage) == 3 or int(inlanguage) == 4 or int(inlanguage) == 5)):
            error = 1
        else:
            print("Please enter a valid number (1 - 5).")

    # Obtain font style for output image and check if valid entry
    print("\nYou have 3 choices for output font. \nEnter 1 for Arial, 2 for Times New Roman , 3 for Comic Sans.")
    error = 0
    while error == 0:
        fontChoice = input('Your font choice:  ')
        if fontChoice == '1' or fontChoice == '2' or fontChoice == '3':
            error = 1
        else:
            print("Invalid entry. Please enter a valid number, 1 - 3.")

    # Obtain font color choice from user and check if input is valid
    print("\nYou have 4 choices for output font color. \nEnter 1 for black, 2 for red, 3 for blue, or 4 for pink.")
    error = 0
    while error == 0:
        fontColorChoice = input('Your font color choice: ')
        if fontColorChoice == '1' or fontColorChoice == '2' or fontColorChoice == '3' or fontColorChoice == '4':
            error = 1
        else:
            print("Invalid entry. Please enter a valid number, 1 - 4.")

    # Perform OCR on the input image file and let user know when finished this step
    # Give user a choice to test the software
    print("\nDo you want to use the software normally, or test it with a test suite?")
    print("Enter 1 to use normally, enter 2 to test software function.")
    error = 0
    while error == 0:
        choice = input("Your choice: ")
        print('\n')
        if choice == '1' or '2':
            error = 1
        else:
            print("Please enter a valid entry: 1 or 2.\n")
    if choice == '2':
        test_suite(path, userfile, inlanguage)
    elif choice == '1':
        print("******Starting******")
        text = ocr_core(path + "/" + userfile, inlanguage)
        writefile(path, text)
        print("OCR of image " + userfile + " is done.")

        # Perform the translation step
        print("Now performing the translation.")
        print("The bigger your file, the longer the wait...")
        translate_text(path, userfile, inlanguage, fontChoice, fontColorChoice)

        print("~~~~~~Finished~~~~~~")

run()
