Software design paradigm
In project 3, a design paradigm needed to be chosen to fit the needs of team 1. The design paradigm chosen by team 1 was top-down functional decomposition. 
Top-down functional decomposition is a design paradigm that focuses on breaking down a very large system or project into smaller and much more manageable segments. 
This allows for each segment to be refined in greater detail and can be done continuously until the entire system is reduced down to a number of modular components that are easy to implement. Top-down functional decomposition was picked by our group for a number of reasons. 
To start off, when we were trying to layout the framework for our project, we had issues visualizing how the project would be organized and broken down into manageable yet functional pieces. 
We were very disorganized and the project layout was hard for even us to understand. Using top-down functional decomposition, we were able to lay out a framework with much greater clarity and detail. 
In addition, top-down functional decomposition also allowed the project to be broken down into much more manageable parts. 
This allowed us to allocate work more efficiently due to the decomposition of component, since we could divide up work between various groups of people and have them focus on a different number of components instead of having everyone work on a giant, unmanageable chunk of the project. 
To summarize, top-down functional decomposition was chosen as team 1â€™s design paradigm due to its flexibility, ability to continuously break down and refine components continuously, clarity and system compartmentalization efficiency. 
